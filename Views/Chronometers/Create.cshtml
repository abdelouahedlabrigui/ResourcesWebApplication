@model ResourcesWebApplication.Models.Chronometers.Chronometer
<style>
    table{
        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    }
</style>
@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Chronometer</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form >            
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <textarea asp-for="Title" id="title" cols="30" rows="10" class="form-control-plaintext bg-light text-dark" spellcheck="false"></textarea>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Hour" class="control-label"></label>
                <input asp-for="Hour" id="hour" class="form-control" onload="loadHours()" autocomplete="off" />
                <span asp-validation-for="Hour" class="text-danger"></span>
            </div>
            @* <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary"  />
            </div> *@
            <div class="form-group">
                <pre id="createMessageError"></pre>
            </div>
        </form>
    </div>
    <div class="col">
        <div class="card">
            <div class="card-header">
                <div class="form-group">
                    <label for="chronometer" class="bg-dark text-white">Chronometer</label>
                    <input 
                        type="text" 
                        id="currentTimeInput" 
                        class="form-control-plaintext"
                        style="font-size: 240%; color: rgb(70, 0, 70);"                    
                    />
                    <button class="btn bg-dark text-white" onclick="startChronometer()">Start</button>
                    <button class="btn bg-danger text-white" onclick="postData()" >Fetch</button>
                </div>
            </div>
            <div class="card-footer">
                <table class="table text-dark table-stripped" id="chronometerTable">
                    <thead class="text-white" style="background-color: #810c47;">
                        <tr>
                            <th>Title</th>
                            <th>Hour</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody style="background-color: rgb(245, 245, 243)"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script type="text/javascript">
    function updateCurrentTime()
    {
        var currentTimeInput = document.getElementById('currentTimeInput');
        var currentTime = new Date();
        var hours = currentTime.getHours();
        var minutes = currentTime.getMinutes();
        var seconds = currentTime.getSeconds();
        var milliseconds = currentTime.getMilliseconds();

        var formattedTime = `${padZero(hours)}:${padZero(minutes)}:${padZero(seconds)}.${padZero(milliseconds, 3)}`;
        currentTimeInput.value = formattedTime;
    }
    function padZero(number, width = 2)
    {
        var str = number.toString();
        while(str.length < width)
        {
            str = '0' + str;
        }
        return str;
    }
    setInterval(updateCurrentTime, 100);
    updateCurrentTime();
    function startChronometer()
    {
        var chronometer = document.getElementById('currentTimeInput');
        var hour = document.getElementById('hour');
        var title = document.getElementById('title');
        
        if(chronometer.value && title.value)
        {
            hour.value = chronometer.value;
        } else {
            alert('Please fill-in Hour & title');
        }
        var tableBody = document.querySelector('#chronometerTable tbody');
        var row = tableBody.insertRow();

        var titleCell = row.insertCell(0);
        var hourCell = row.insertCell(1);

        titleCell.textContent = title.value;
        hourCell.textContent = hour.value;
        var actionCell = row.insertCell(2);
        var deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.addEventListener('click', function(){
            tableBody.removeChild(row);
        });
        actionCell.appendChild(deleteButton);
    }
    function postData()
    {
        var tableRows = document.querySelectorAll('#chronometerTable tbody tr');
        var dataToSend = [];


        tableRows.forEach(row => {
            var title = row.cells[0].textContent;
            var hour = row.cells[1].textContent.toString();
            var rowData = {
                Title: title,
                Hour: hour
            };
            dataToSend.push(rowData);
        });

        console.log(dataToSend);

        fetch('/Chronometers/PostChronometerData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(dataToSend)
        })
        .then(response => {
            if(!response.ok)
            {
                throw new Error('Network response was not ok.');
            } else if (response.ok)
            {
                window.location.href = '/Chronometers';
            } else {
                return response.json();
            }
        })
        .catch(error => {
            document.getElementById('createMessageError').innerHTML = `Error sending data: ${error}`;
        })
    }
</script>