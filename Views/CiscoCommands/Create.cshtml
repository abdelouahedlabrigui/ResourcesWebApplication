@model ResourcesWebApplication.Models.Commands.CiscoCommand

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>CiscoCommand</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" spellcheck="false" autocomplete="off" id="title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" spellcheck="false" autocomplete="off" id="description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Command" class="control-label"></label>
                <input asp-for="Command" spellcheck="false" autocomplete="off" id="command" class="form-control" />
                <span asp-validation-for="Command" class="text-danger"></span>
            </div>
            
            @* <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div> *@
        </form>
    </div>
    <div class="col">
        <div class="card">
            <div class="card-header">
                <div class="form-group">
                    <label for="chronometer" class="bg-dark text-white">Chronometer</label>
                    <input 
                        type="text" 
                        id="currentTimeInput" 
                        class="form-control-plaintext"
                        style="font-size: 240%; color: rgb(70, 0, 70);"                    
                    />
                    <button class="btn bg-dark text-white" onclick="getCiscoCommands()">ADD</button>
                    <button class="btn bg-danger text-white" onclick="postCiscoCommandsData()" >Fetch</button>
                </div>
            </div>
            <div class="card-footer">
                <table class="table bg-light text-dark" id="ciscoCommandsTable">
                    <thead class="bg-dark text-white">
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Command</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="card-footer">
                <div class="form-group">
                    <pre id="createMessageError"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script>
    function updateCurrentTime()
    {
        var currentTimeInput = document.getElementById('currentTimeInput');
        var currentTime = new Date();
        var hours = currentTime.getHours();
        var minutes = currentTime.getMinutes();
        var seconds = currentTime.getSeconds();
        var milliseconds = currentTime.getMilliseconds();

        var formattedTime = `${padZero(hours)}:${padZero(minutes)}:${padZero(seconds)}.${padZero(milliseconds, 3)}`;
        currentTimeInput.value = formattedTime;
    }
    function padZero(number, width = 2)
    {
        var str = number.toString();
        while(str.length < width)
        {
            str = '0' + str;
        }
        return str;
    }
    setInterval(updateCurrentTime, 100);
    updateCurrentTime();
    function getCiscoCommands()
    {
        var title = document.getElementById('title');
        var description = document.getElementById('description');
        var command = document.getElementById('command');

        var tableBody = document.querySelector('#ciscoCommandsTable tbody');
        var row = tableBody.insertRow();

        var titleCell = row.insertCell(0);
        var descriptionCell = row.insertCell(1);
        var commandCell = row.insertCell(2);


        titleCell.textContent = title.value;
        descriptionCell.textContent = description.value;
        commandCell.textContent = command.value;

    }
    function postCiscoCommandsData()
    {
        var tableRows = document.querySelectorAll('#ciscoCommandsTable tbody tr');
        var dataToSend = [];


        tableRows.forEach(row => {
            var title = row.cells[0].textContent;
            var description = row.cells[1].textContent.toString();
            var command = row.cells[2].textContent.toString();

            var rowData = {
                Title: title,
                Description: description,
                Command: command
            };
            dataToSend.push(rowData);
        });

        console.log(dataToSend);

        fetch('/CiscoCommands/PostCiscoCommands', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(dataToSend)
        })
        .then(response => {
            if(!response.ok)
            {
                throw new Error('Network response was not ok.');
            } else if (response.ok)
            {
                window.location.href = '/CiscoCommands';
            } else {
                return response.json();
            }
        })
        .catch(error => {
            document.getElementById('createMessageError').innerHTML = `Error sending data: ${error}`;
        })
    }
</script>