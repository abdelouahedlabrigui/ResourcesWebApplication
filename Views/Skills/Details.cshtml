@model ResourcesWebApplication.Models.Knowledge.Mixed

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header bg-dark text-white">
                <h1>@Html.DisplayNameFor(model => model.Skill.Category): @Html.DisplayFor(model => model.Skill.Category)</h1>
            </div>
            <div class="card-body bg-light table-hover text-dark">
                <dl class="row">
                    <dt class = "col-sm-2">
                        @Html.DisplayNameFor(model => model.Skill.Title)
                    </dt>
                    <dd class = "col-sm-10">
                        @Html.DisplayFor(model => model.Skill.Title)
                    </dd>
                </dl>
            </div>
            <div class="card-footer bg-dark text-white">
                <dl class="row">
                    <dt class = "col-sm-2">
                        @Html.DisplayNameFor(model => model.Skill.Detail)
                    </dt>
                    <dd class = "col-sm-10">
                        @Html.DisplayFor(model => model.Skill.Detail)
                    </dd>
                </dl>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card">            
            <div class="card-header bg-dark text-white">                
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="DocumentID">Document ID</label>
                            <select name="DocumentID" id="documentID" class="form-control-plaintext text-white bg-dark">
                                @foreach(var item in Model.DocumentIDs)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="SkillID">Skill IDs</label>
                            <input type="text" name="SkillID" id="skillID" class="form-control-plaintext text-white" value="@Model.Skill.Id" readonly>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="CodeID">Code IDs</label>
                            <select name="CodeID" id="codeID" class="form-control-plaintext text-white bg-dark">
                                @foreach(var item in Model.CodeID)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>            
            <div class="card-body">
                <hr style="background-color: purple; height: 1%;"> 
                <div class="form-group">
                    <label for="Title">Title</label>
                    <input type="text" name="title" id="title" spellcheck="false" autocomplete="off" class="form-control-plaintext bg-light text-dark">
                </div> 
                <div class="form-group">
                    <label class="control-label">Description</label>
                    <textarea id="description" cols="30" rows="5" class="form-control-plaintext bg-light text-dark" spellcheck="false"></textarea>
                </div>                              
                <hr style="background-color: purple; height: 1%;">
                <input 
                    type="text" 
                    id="createdAT" 
                    name="CreatedAT"
                    class="form-control-plaintext"
                    style="font-size: 240%; color: rgb(68, 0, 0);" 
                    readonly                   
                />
            </div>
            <div class="card-footer">
                
                <div class="form-group container">
                    <button class="btn btn-lg btn-block bg-dark text-white" onclick="addCase()">Add</button>
                </div>
                <hr>
                <div class="form-group">
                    <pre id="createMessageError"></pre>
                </div>
            </div>
            
        </div>
    </div>
</div>
<div class="container">
    <a asp-action="Edit" asp-route-id="@Model.Skill.Id" class="text-dark">Edit</a> |
    <a asp-action="Index" class="text-dark">Back to List</a>
</div>
<script type="text/javascript">
    function updateCurrentTime()
    {
        var currentTimeInput = document.getElementById('createdAT');
        var currentTime = new Date();
        var hours = currentTime.getHours();
        var minutes = currentTime.getMinutes();
        var seconds = currentTime.getSeconds();
        var milliseconds = currentTime.getMilliseconds();

        var formattedTime = `${padZero(hours)}:${padZero(minutes)}:${padZero(seconds)}.${padZero(milliseconds, 3)}`;
        currentTimeInput.value = formattedTime;
    }
    function padZero(number, width = 2)
    {
        var str = number.toString();
        while(str.length < width)
        {
            str = '0' + str;
        }
        return str;
    }
    setInterval(updateCurrentTime, 100);
    updateCurrentTime();

    var documentID = document.getElementById("documentID");
    var skillID = document.getElementById("skillID");
    var codeID = document.getElementById("codeID");
    var description = document.getElementById("description");
    var title = document.getElementById('title');
    var createdAT = document.getElementById('createdAT');

    function addCase()
    {
        var dataToSend = [];
        if(documentID.value && skillID.value && codeID.value && description.value && title.value && createdAT.value)
        {
            var data = {
                SkillID: skillID.value,
                DocumentID: documentID.value,
                CodeID: codeID.value,
                Title: description.value,
                Description: title.value,
                CreatedAT: createdAT.value
            };
            dataToSend.push(data);
            fetch('/Skills/AddCase', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dataToSend)
            })
            .then(response => {
                if(!response.ok)
                {
                    throw new Error('Network response was not ok.');
                } else if (response.ok)
                {
                    window.location.href = '/Skills/CasesIndex';
                } else {
                    return response.json();
                }
            })
            .catch(error => {
                document.getElementById('createMessageError').innerHTML = `Error sending data: ${error}`;
            })
        }
    }
</script>